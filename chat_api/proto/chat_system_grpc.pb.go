// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chat_system.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatSystemClient is the client API for ChatSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatSystemClient interface {
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*Chat, error)
	GetChats(ctx context.Context, in *GetChatsRequest, opts ...grpc.CallOption) (*ChatsList, error)
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*Message, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*MessagesList, error)
	SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*MessagesList, error)
}

type chatSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewChatSystemClient(cc grpc.ClientConnInterface) ChatSystemClient {
	return &chatSystemClient{cc}
}

func (c *chatSystemClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/chat_system_proto.ChatSystem/CreateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSystemClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/chat_system_proto.ChatSystem/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSystemClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/chat_system_proto.ChatSystem/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSystemClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/chat_system_proto.ChatSystem/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSystemClient) GetChats(ctx context.Context, in *GetChatsRequest, opts ...grpc.CallOption) (*ChatsList, error) {
	out := new(ChatsList)
	err := c.cc.Invoke(ctx, "/chat_system_proto.ChatSystem/GetChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSystemClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat_system_proto.ChatSystem/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSystemClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*MessagesList, error) {
	out := new(MessagesList)
	err := c.cc.Invoke(ctx, "/chat_system_proto.ChatSystem/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSystemClient) SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*MessagesList, error) {
	out := new(MessagesList)
	err := c.cc.Invoke(ctx, "/chat_system_proto.ChatSystem/SearchMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatSystemServer is the server API for ChatSystem service.
// All implementations should embed UnimplementedChatSystemServer
// for forward compatibility
type ChatSystemServer interface {
	CreateApplication(context.Context, *CreateApplicationRequest) (*Application, error)
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*Application, error)
	GetApplication(context.Context, *GetApplicationRequest) (*Application, error)
	CreateChat(context.Context, *CreateChatRequest) (*Chat, error)
	GetChats(context.Context, *GetChatsRequest) (*ChatsList, error)
	CreateMessage(context.Context, *CreateMessageRequest) (*Message, error)
	GetMessages(context.Context, *GetMessagesRequest) (*MessagesList, error)
	SearchMessages(context.Context, *SearchMessagesRequest) (*MessagesList, error)
}

// UnimplementedChatSystemServer should be embedded to have forward compatible implementations.
type UnimplementedChatSystemServer struct {
}

func (UnimplementedChatSystemServer) CreateApplication(context.Context, *CreateApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedChatSystemServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedChatSystemServer) GetApplication(context.Context, *GetApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedChatSystemServer) CreateChat(context.Context, *CreateChatRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatSystemServer) GetChats(context.Context, *GetChatsRequest) (*ChatsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChats not implemented")
}
func (UnimplementedChatSystemServer) CreateMessage(context.Context, *CreateMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedChatSystemServer) GetMessages(context.Context, *GetMessagesRequest) (*MessagesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedChatSystemServer) SearchMessages(context.Context, *SearchMessagesRequest) (*MessagesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessages not implemented")
}

// UnsafeChatSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatSystemServer will
// result in compilation errors.
type UnsafeChatSystemServer interface {
	mustEmbedUnimplementedChatSystemServer()
}

func RegisterChatSystemServer(s grpc.ServiceRegistrar, srv ChatSystemServer) {
	s.RegisterService(&ChatSystem_ServiceDesc, srv)
}

func _ChatSystem_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSystemServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_system_proto.ChatSystem/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSystemServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSystem_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSystemServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_system_proto.ChatSystem/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSystemServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSystem_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSystemServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_system_proto.ChatSystem/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSystemServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSystem_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSystemServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_system_proto.ChatSystem/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSystemServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSystem_GetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSystemServer).GetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_system_proto.ChatSystem/GetChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSystemServer).GetChats(ctx, req.(*GetChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSystem_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSystemServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_system_proto.ChatSystem/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSystemServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSystem_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSystemServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_system_proto.ChatSystem/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSystemServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSystem_SearchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSystemServer).SearchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_system_proto.ChatSystem/SearchMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSystemServer).SearchMessages(ctx, req.(*SearchMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatSystem_ServiceDesc is the grpc.ServiceDesc for ChatSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_system_proto.ChatSystem",
	HandlerType: (*ChatSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _ChatSystem_CreateApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _ChatSystem_UpdateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _ChatSystem_GetApplication_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _ChatSystem_CreateChat_Handler,
		},
		{
			MethodName: "GetChats",
			Handler:    _ChatSystem_GetChats_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _ChatSystem_CreateMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _ChatSystem_GetMessages_Handler,
		},
		{
			MethodName: "SearchMessages",
			Handler:    _ChatSystem_SearchMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_system.proto",
}
